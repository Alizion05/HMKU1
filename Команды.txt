python emulator.py config.xml

python -m unittest test_emulator.py

python -m unittest -v test_emulator.py

Вот список команд, которые можно вводить в строку эмулятора для проверки его работы, учитывая структуру `test.tar` и `config.xml` из предыдущего ответа:

**Начальное состояние эмулятора:**

Предполагается, что эмулятор запущен, и вы находитесь в корневой директории `/`.

**Проверка команды `ls`:**

1.  **`ls`** - Вывод содержимого текущей директории (корневой `/`). Должны отобразиться `file1.txt`, `dir1`, `dir2`.
2.  **`ls file1.txt`** - Вывод информации о файле `file1.txt`. Должно отобразиться `file1.txt`.
3.  **`ls dir1`** - Вывод содержимого директории `dir1`. Должно отобразиться `dir1/file2.txt`.
4.  **`ls nonexistent`** - Проверка обработки несуществующего файла/директории. Должно вывести сообщение об ошибке: `ls: cannot access 'nonexistent': No such file or directory`.

**Проверка команды `cd`:**

5.  **`cd dir1`** - Переход в директорию `dir1`. Приглашение командной строки должно измениться на `testuser@your_hostname:dir1$`.
6.  **`cd ..`** - Возврат в родительскую директорию (из `dir1` в `/`). Приглашение командной строки должно измениться на `testuser@your_hostname:/$`.
7.  **`cd /`** - Переход в корневую директорию. Приглашение командной строки должно измениться на `testuser@your_hostname:/$`.
8.  **`cd nonexistent`** - Проверка обработки несуществующей директории. Должно вывести сообщение об ошибке: `cd: no such file or directory: nonexistent`.

**Проверка команды `chmod`:**

9.  **`chmod 755 file1.txt`** - Изменение прав доступа к файлу `file1.txt` на `755`.  Визуально результат не будет виден, но можно проверить, например, через логи.
10. **`chmod invalid_mode file1.txt`** - Проверка обработки некорректного формата прав доступа. Должно вывести сообщение об ошибке: `chmod: invalid mode: 'invalid_mode'`.
11. **`chmod 777 nonexistent.txt`** - Проверка обработки несуществующего файла. Должно вывести сообщение об ошибке: `chmod: cannot access 'nonexistent.txt': No such file or directory`.

**Проверка команды `tac`:**

12. **`tac file1.txt`** - Вывод содержимого файла `file1.txt` в обратном порядке. Должно вывести:
    ```
    Second line of file1.
    This is the content of file1.
    ```
13. **`tac nonexistent.txt`** - Проверка обработки несуществующего файла. Должно вывести сообщение об ошибке: `tac: cannot open 'nonexistent.txt' for reading: No such file or directory`.
14. **`tac dir1`** - Проверка обработки директории. Должно вывести сообщение об ошибке: `tac: cannot open 'dir1' for reading: No such file or directory`.

**Проверка команды `uname`:**

15. **`uname`** - Вывод информации о системе. Должно вывести `Linux`.
16. **`uname -a`** - Вывод информации о системе с аргументом. Должно вывести `Linux`. (В данной реализации аргументы игнорируются).
17. **`uname some_option`** - Вывод информации о системе с произвольным аргументом. Должно вывести `Linux`. (В данной реализации аргументы игнорируются).

**Проверка команды `exit`:**

18. **`exit`** - Завершение работы эмулятора.

**Дополнительные проверки (комбинации команд):**

19. **`cd dir1`** <Enter>
   **`ls`** <Enter>  (Находясь в `dir1`, должен отобразиться `dir1/file2.txt`)
20. **`cd dir1`** <Enter>
    **`tac file2.txt`** <Enter> (Находясь в `dir1`, должен отобразиться `Content of file2 inside dir1.` )
21. **`chmod 644 file1.txt`** <Enter>
    **`tac file1.txt`** <Enter> (Проверка, что `chmod` не повлиял на содержимое, а только на права)

**Важно:**

*   `your_hostname` в приглашении командной строки будет зависеть от вашего реального имени хоста.
*   Лог-файл (`test.log`) будет содержать записи обо всех выполненных командах. Проверяйте его содержимое после выполнения команд для убеждения, что логирование работает корректно.
*   Убедитесь, что файлы `config.xml` и `test.tar` находятся в той же директории, откуда запускается `emulator.py`.

Этот список команд позволит вам протестировать основные функции вашего эмулятора и убедиться в их корректной работе.